[gd_scene load_steps=18 format=3 uid="uid://02k0ubq0nlxn"]

[ext_resource type="Script" uid="uid://cv5l2ndd7kivb" path="res://scripts/hacking_game.gd" id="1_5dcew"]
[ext_resource type="Texture2D" uid="uid://cev0382nhv46i" path="res://sprites/kenny game icons/arrowUp.png" id="3_8rbb1"]
[ext_resource type="Texture2D" uid="uid://vxb7v483i63b" path="res://sprites/buttons/hacking-worm-nothing.png" id="3_gdvd8"]
[ext_resource type="Texture2D" uid="uid://c02to5i50bgby" path="res://sprites/kenny game icons/arrowDown.png" id="4_8tddg"]
[ext_resource type="Texture2D" uid="uid://bowjve07f2wq0" path="res://sprites/kenny game icons/arrowLeft.png" id="5_5lwk8"]
[ext_resource type="Texture2D" uid="uid://bm8p8oa78pasu" path="res://sprites/kenny game icons/arrowRight.png" id="6_is8ts"]
[ext_resource type="Texture2D" uid="uid://cit6n6y5v4qu6" path="res://sprites/buttons/hacking-default.png" id="7_5lwk8"]
[ext_resource type="Texture2D" uid="uid://ce1h5n5tsraus" path="res://sprites/buttons/hacking-destroyed.png" id="8_is8ts"]
[ext_resource type="Texture2D" uid="uid://bdywhfpm2wypp" path="res://sprites/buttons/hacking-correct.png" id="9_f2w7f"]
[ext_resource type="Texture2D" uid="uid://dftv1h45wlpju" path="res://sprites/buttons/hacking-wrongplace.png" id="10_5yi84"]
[ext_resource type="Texture2D" uid="uid://bqcnbwg8m43m6" path="res://sprites/buttons/hacking-worm-head.png" id="11_5yi84"]
[ext_resource type="Texture2D" uid="uid://cvjeepj4nvdhc" path="res://sprites/buttons/hacking-worm-straight.png" id="12_7o2ew"]
[ext_resource type="Script" uid="uid://kf4ebrv2dpa3" path="res://scripts/ui/hacking_game_worm.gd" id="12_f2w7f"]
[ext_resource type="Texture2D" uid="uid://chtr1lmmidrfs" path="res://sprites/buttons/hacking-worm-head-dead.png" id="12_l3q62"]
[ext_resource type="Texture2D" uid="uid://btn342ecjinni" path="res://sprites/buttons/hacking-worm-angled.png" id="13_l3q62"]
[ext_resource type="Texture2D" uid="uid://dejmkmccewb4n" path="res://sprites/buttons/hacking-worm-tail.png" id="14_7o2ew"]

[sub_resource type="GDScript" id="GDScript_gdvd8"]
script/source = "extends CanvasLayer
class_name HackingGameUI

const _HACKING_TUTORIAL_KEY: String = \"hacking\"

@export var _game: HackingGame

@export var _hacking_area: Control

@export var _controls_area: Control

@export var _attempts_label: Label

@export var _attempt_button: Button

@export var _bombs_label: Label

@export var _bombs_counter: Label

@export var _worms_label: Label

@export var _worms_counter: Label

@export var _worming: HackingGameWorm

@export var _deploy_bomb_button: Button

@export var background_tex: Texture

@export var outer_spacer_color: Color

@export var inner_spacer_color: Color

@export var tex_up: Texture

@export var tex_down: Texture

@export var tex_left: Texture

@export var tex_right: Texture

@export var _playing_field_outer_container: AspectRatioContainer

@export var _playing_field_container: GridContainer

@export var _playing_field_container_lower: GridContainer

@export var destroyed_text_color: Color

@export var default_text_color: Color

@export var discoverd_text_color: Color

@export var discoverd_not_text_color: Color

@export var target_text_color: Color = Color.HOT_PINK

@export var word_bg_tex_default: Texture

@export var word_bg_tex_destroyed: Texture

@export var word_bg_tex_correct: Texture

@export var word_bg_tex_wrong_place: Texture

@export var attempt_history: Container

@export var most_recent_attempt: Container

@export var intro_tutorial: Array[String]

const DEPLOY_BOMB_TEXT: String = \"Deploy Bomb\"
const CANCEL_BOMB_TEXT: String = \"Abort Bomb Deployment\"

func _ready() -> void:
    hide()

    if _game.on_change_attempts.connect(_handle_attempts_updated) != OK:
        push_error(\"Could not connect to attempts updated\")

    if _game.on_new_attempts.connect(_handle_new_attempts) != OK:
        push_error(\"Could not connect to new attempts\")

    if _game.on_board_changed.connect(_sync_board) != OK:
        push_error(\"Could not connect to board changed\")

    if _game.on_solve_game.connect(_handle_solve_game) != OK:
        push_error(\"Could not connect to hacking solved\")

    if _game.on_fail_game.connect(_handle_fail_game) != OK:
        push_error(\"Could not connect to hacking failed\")

    if _game.settings.accessibility.on_update_handedness.connect(_handle_handedness) != OK:
        push_error(\"Could not connect handedness change\")

    _handle_handedness(AccessibilitySettings.handedness)

    _bombs_label.text = HackingGame.item_id_to_text(HackingGame.ITEM_HACKING_BOMB)
    _worms_label.text = HackingGame.item_id_to_text(HackingGame.ITEM_HACKING_WORM)

func _unhandled_input(event: InputEvent) -> void:
    if !_bombing || !_hovering || event.is_echo():
        return

    if event is InputEventMouseButton:
        var mouse: InputEventMouseButton = event
        if mouse.button_index == MOUSE_BUTTON_LEFT && mouse.pressed:
            _on_hover_exit(_hover_coordinates)
            _game.bomb_coords(_marked_targets)
            _cancel_bombing()
            sync_inventory_actions()

    elif event is InputEventScreenTouch:
        var touch: InputEventScreenTouch = event
        if touch.pressed:
            _on_hover_exit(_hover_coordinates)
            _game.bomb_coords(_marked_targets)
            _cancel_bombing()
            sync_inventory_actions()

func is_game_coords(coords: Vector2i) -> bool:
    return posmod(coords.x, 2) == 1 && posmod(coords.y, 2) == 1

func translate_to_game_coords(coords: Vector2i) -> Vector2i:
    @warning_ignore_start(\"integer_division\")
    return Vector2i(coords.x / 2, coords.y / 2)
    @warning_ignore_restore(\"integer_division\")

func _handle_handedness(hand: AccessibilitySettings.Handedness) -> void:
    if hand == AccessibilitySettings.Handedness.RIGHT:
        _controls_area.move_to_front()
    else:
        _hacking_area.move_to_front()

func _handle_solve_game(solution_start: Vector2i) -> void:
    _disable_everything()
    var rect: Rect2i = Rect2i(solution_start, Vector2i( _game.get_passphrase_length(), 1))
    for coords: Vector2i in _field_roots:
        _field_labels[coords].visible = rect.has_point(coords)
        _field_backgrounds[coords].visible = rect.has_point(coords)

    await get_tree().create_timer(1.5).timeout

    hide()
    _game.end_game()

func _handle_fail_game() -> void:
    _disable_everything()
    await get_tree().create_timer(0.8).timeout

    for coords: Vector2i in _field_roots:
        _field_labels[coords].visible = false
        _field_backgrounds[coords].visible = false
        await get_tree().create_timer(0.01).timeout

    await get_tree().create_timer(0.8).timeout

    hide()
    _game.end_game()

func _disable_everything() -> void:
    toggle_shift_buttons(false)
    toggle_word_controls(false)
    _attempt_button.disabled = true
    _deploy_bomb_button.disabled = true
    _worming.disabled = true


var _attempts: Array[String]
var _best_attempt: Array[String]
var _best_attempt_statuses: Array[HackingGame.WordStatus]

func _handle_new_attempts(attempts: Array[Array], statuses: Array[Array]) -> void:
    if attempts.size() == 0:
        return

    # We should always show best attempt on current board so best attempt from previous should move to history if novel
    if _best_attempt.size() > 0 && !_attempts.has(\"\".join(_best_attempt)):
        var hbox: HBoxContainer = HBoxContainer.new()
        attempt_history.add_child(hbox)
        _attempts.append(\"\".join(_best_attempt))
        _add_attempt_passphrase(hbox, _best_attempt, _best_attempt_statuses)

    UIUtils.clear_control(most_recent_attempt)
    for idx: int in range(attempts.size()):
        var phrase: String = \"\".join(attempts[idx])
        if idx == 0:
            _add_attempt_passphrase(most_recent_attempt, attempts[idx], statuses[idx])
            _best_attempt = attempts[idx]
            _best_attempt_statuses = statuses[idx]
        elif !_attempts.has(phrase):
            var hbox: HBoxContainer = HBoxContainer.new()
            attempt_history.add_child(hbox)
            _add_attempt_passphrase(hbox, attempts[idx], statuses[idx])
            _attempts.append(phrase)

func _add_attempt_passphrase(root: Container, attempt: Array[String], statuses: Array[HackingGame.WordStatus]) -> void:
    for idx: int in range(_game.get_passphrase_length()):
        var in_attempt: bool = idx < statuses.size()
        HackingGameUIBuilder.add_word_ui_to_container(
            root,
            \"??\" if !in_attempt else attempt[idx],
            func (_label: Label, bg: TextureRect, _root: Control) -> void:
                bg.texture = _status_to_texture(HackingGame.WordStatus.DEFAULT if !in_attempt else statuses[idx])
        )

func reset_phase() -> void:
    var out_of_attempts: bool = _game.attempts_remaining <= 0
    _attempt_button.disabled = out_of_attempts

    if out_of_attempts:
        _worming.disabled = true
        _deploy_bomb_button.disabled = true
        toggle_shift_buttons(true)

func set_worm_phase() -> void:
    _deploy_bomb_button.disabled = true
    _attempt_button.disabled = true


func _handle_attempts_updated(attempts: int) -> void:
    print_debug(\"Got new attempts %s\" % attempts)
    _attempts_label.text = \"%02d\" % attempts

    reset_phase()

func toggle_shift_buttons(disabled: bool) -> void:
    for btn: Button in _shift_buttons:
        btn.disabled = disabled

func toggle_word_controls(interactable: bool) -> void:
    for coords: Vector2i in _field_roots:
        _field_roots[coords].mouse_default_cursor_shape = Control.CursorShape.CURSOR_POINTING_HAND if interactable else Control.CursorShape.CURSOR_ARROW

var _field_labels: Dictionary[Vector2i, Label]
var _field_backgrounds: Dictionary[Vector2i, TextureRect]
var _field_roots: Dictionary[Vector2i, Control]
var _shift_buttons: Array[Button]
var lower_field: Dictionary[Vector2i, TextureRect]

var _tween: Tween

const SLIDE_TIME: float = 0.3

func show_game() -> void:
    # Actual columns, one empty column inbetween each and then shifting buttons at the edges
    var columns: int = _game.width + _game.width - 1 + 2
    var rows: int = _game.height +  _game.height - 1 + 2

    _playing_field_outer_container.ratio = columns as float / rows as float
    _playing_field_container.columns = columns
    _playing_field_container_lower.columns = columns

    _worming.reset_phase()

    UIUtils.clear_control(_playing_field_container_lower)
    UIUtils.clear_control(_playing_field_container)
    UIUtils.clear_control(most_recent_attempt)
    UIUtils.clear_control(attempt_history)

    _field_labels.clear()
    _field_backgrounds.clear()
    _field_roots.clear()
    _shift_buttons.clear()
    _attempts.clear()
    _best_attempt.clear()
    _best_attempt_statuses.clear()

    _setup_lower_field(columns, rows)
    _setup_field(columns)
    _setup_placeholder_passphrase()
    sync_inventory_actions()

    show()

    if _game.settings.tutorial.get_tutorial_progress(_HACKING_TUTORIAL_KEY) == 0:
        pass

func sync_inventory_actions() -> void:
    var inventory: Inventory = Inventory.active_inventory
    var bombs: int = roundi(inventory.get_item_count(HackingGame.ITEM_HACKING_BOMB))
    var worms: int = roundi(inventory.get_item_count(HackingGame.ITEM_HACKING_WORM))

    _bombs_counter.text = \"%03d\" % bombs
    _deploy_bomb_button.text = DEPLOY_BOMB_TEXT
    _deploy_bomb_button.disabled = bombs == 0

    _worms_counter.text = \"%03d\" % worms
    _worming.disabled = worms == 0
    _worming.reset_deploy_button_text()

func _setup_placeholder_passphrase() -> void:
    for _idx: int in range(_game.get_passphrase_length()):
        HackingGameUIBuilder.add_word_ui_to_container(
            most_recent_attempt,
            \"??\",
            func (_label: Label, bg: TextureRect, _root: Control) -> void:
                bg.texture = _status_to_texture(HackingGame.WordStatus.DEFAULT)
        )

func _setup_lower_field(columns: int, rows: int) -> void:
    var btn: Button
    for full_row: int in range(rows):
        for full_col: int in range(columns):
            if full_row == 0:
                if posmod(full_col, 2) == 0:
                    _playing_field_container_lower.add_child(HackingGameUIBuilder.get_spacer(outer_spacer_color))

                else:
                    btn = HackingGameUIBuilder.get_shift_button(_playing_field_container_lower, \"down\", tex_down)
                    _shift_buttons.append(btn)
                    if btn.connect(
                        \"pressed\",
                        func () -> void:
                            toggle_shift_buttons(true)
                            if _tween != null && _tween.is_running():
                                _tween.kill()
                                _sync_board()

                            @warning_ignore_start(\"integer_division\")
                            var col: int =  (full_col - 1) / 2
                            @warning_ignore_restore(\"integer_division\")

                            _game.shift_col(col, 1)

                            _tween = create_tween()
                            @warning_ignore_start(\"return_value_discarded\")
                            _tween.set_parallel()
                            for row: int in range(_game.height):
                                var root: Control = _field_roots[Vector2i(col, row)]
                                var distance: float = root.get_global_rect().size.y * 2
                                _tween.tween_property(root, \"global_position:y\", root.global_position.y + distance, SLIDE_TIME)
                            @warning_ignore_restore(\"return_value_discarded\")

                            await get_tree().create_timer(SLIDE_TIME * 1.1).timeout
                            _sync_board()
                            toggle_shift_buttons(false)
                            ,
                    ) != OK:
                        push_error(\"failed to connect shift down callback\")
            elif full_row == rows - 1:
                if posmod(full_col, 2) == 0:
                    _playing_field_container_lower.add_child(HackingGameUIBuilder.get_spacer(outer_spacer_color))

                else:
                    btn = HackingGameUIBuilder.get_shift_button(_playing_field_container_lower, \"up\", tex_up)
                    _shift_buttons.append(btn)
                    if btn.connect(
                        \"pressed\",
                        func () -> void:
                            toggle_shift_buttons(true)
                            if _tween != null && _tween.is_running():
                                _tween.kill()
                                _sync_board()

                            @warning_ignore_start(\"integer_division\")
                            var col: int = (full_col - 1) / 2
                            @warning_ignore_restore(\"integer_division\")

                            _game.shift_col(col, -1)

                            _tween = create_tween()
                            @warning_ignore_start(\"return_value_discarded\")
                            _tween.set_parallel()
                            for row: int in range(_game.height):
                                var root: Control = _field_roots[Vector2i(col, row)]
                                var distance: float = root.get_global_rect().size.y * 2
                                _tween.tween_property(root, \"global_position:y\", root.global_position.y - distance, SLIDE_TIME)
                            @warning_ignore_restore(\"return_value_discarded\")

                            await get_tree().create_timer(SLIDE_TIME * 1.1).timeout
                            _sync_board()
                            toggle_shift_buttons(false)
                            ,
                    ) != OK:
                        push_error(\"failed to connect shift down callback\")
            else:
                @warning_ignore_start(\"integer_division\")
                var row: int = (full_row - 1) / 2
                @warning_ignore_restore(\"integer_division\")

                if full_col == 0:
                    if posmod(full_row, 2) == 1:
                        btn = HackingGameUIBuilder.get_shift_button(_playing_field_container_lower, \"right\", tex_right)
                        _shift_buttons.append(btn)
                        if btn.connect(
                            \"pressed\",
                            func () -> void:
                                toggle_shift_buttons(true)
                                if _tween != null && _tween.is_running():
                                    _tween.kill()
                                    _sync_board()

                                _game.shift_row(row, 1)
                                _tween = create_tween()

                                @warning_ignore_start(\"return_value_discarded\")
                                for idx: int in range(_game.width):
                                    var root: Control = _field_roots[Vector2i(idx, row)]
                                    var distance: float = root.get_global_rect().size.x * 2
                                    _tween.tween_property(root, \"global_position:x\", root.global_position.x + distance, SLIDE_TIME)
                                    if idx == 0:
                                        _tween.set_parallel()
                                @warning_ignore_restore(\"return_value_discarded\")

                                await get_tree().create_timer(SLIDE_TIME * 1.1).timeout
                                _sync_board()
                                toggle_shift_buttons(false)
                                ,
                        ) != OK:
                            push_error(\"failed to connect shift right callback\")
                    else:
                        _playing_field_container_lower.add_child(HackingGameUIBuilder.get_spacer(outer_spacer_color))
                elif full_col == columns - 1:
                    if posmod(full_row, 2) == 1:
                        btn = HackingGameUIBuilder.get_shift_button(_playing_field_container_lower, \"left\", tex_left)
                        _shift_buttons.append(btn)
                        if btn.connect(
                            \"pressed\",
                            func () -> void:
                                toggle_shift_buttons(true)
                                if _tween != null && _tween.is_running():
                                    _tween.kill()
                                    _sync_board()

                                _game.shift_row(row, -1)

                                _tween = create_tween()
                                @warning_ignore_start(\"return_value_discarded\")
                                _tween.set_parallel()
                                for idx: int in range(_game.width):
                                    var root: Control = _field_roots[Vector2i(idx, row)]
                                    var distance: float = root.get_global_rect().size.x * 2
                                    _tween.tween_property(root, \"global_position:x\", root.global_position.x - distance, SLIDE_TIME)
                                @warning_ignore_restore(\"return_value_discarded\")

                                await get_tree().create_timer(SLIDE_TIME * 1.1).timeout
                                _sync_board()
                                toggle_shift_buttons(false)
                                ,
                        ) != OK:
                            push_error(\"failed to connect shift left callback\")
                    else:
                        _playing_field_container_lower.add_child(HackingGameUIBuilder.get_spacer(outer_spacer_color))
                else:
                    var is_below_word: bool = posmod(full_col, 2) == 1 && posmod(full_row, 2) == 1
                    _playing_field_container_lower.add_child(
                        HackingGameUIBuilder.get_texture_spacer(
                            Color.TRANSPARENT if is_below_word else inner_spacer_color,
                            func (t_rect: TextureRect) -> void:
                                lower_field[Vector2i(full_col, full_row)] = t_rect
                                t_rect.texture = background_tex
                                if !is_below_word:
                                    pass
                                ,
                        )
                    )

func _setup_field(columns: int) -> void:
    for full_col: int in range(columns):
        _playing_field_container.add_child(HackingGameUIBuilder.get_empty_container())

    for row: int in range(_game.height):

        for col: int in range(_game.width):
            _playing_field_container.add_child(HackingGameUIBuilder.get_empty_container())
            _create_and_add_word_tile(row, col)

        _playing_field_container.add_child(HackingGameUIBuilder.get_empty_container())

        for full_col: int in range(columns):
            _playing_field_container.add_child(HackingGameUIBuilder.get_empty_container())

    _sync_board()

func _create_and_add_word_tile(row: int, col: int) -> void:
    var coords: Vector2i = Vector2i(col, row)
    HackingGameUIBuilder.add_word_ui_to_container(
        _playing_field_container,
        _game.get_word(coords),
        func (label: Label, bg: TextureRect, container: Control) -> void:
            _field_labels[coords] = label
            _field_backgrounds[coords] = bg
            _field_roots[coords] = container

            container.mouse_filter = Control.MOUSE_FILTER_PASS

            if container.connect(
                \"mouse_entered\",
                func () -> void:
                    _on_hover_enter(coords)
                    ,
            ) != OK:
                push_error(\"Word at %s could not connect mouse enter\" % coords)

            if container.connect(
                \"mouse_exited\",
                func () -> void:
                    _on_hover_exit(coords)
                    ,
            ) != OK:
                push_error(\"Word at %s could not connect mouse exit\" % coords)
    )

var _hovering: bool
var _hover_coordinates: Vector2i
var _marked_targets: Array[Vector2i]

func _on_hover_enter(coords: Vector2i) -> void:
    _hovering = true
    _hover_coordinates = coords

    if _bombing:
        _marked_targets = _game.get_potential_bomb_target(coords)
        for target: Vector2i in _marked_targets:
            _field_labels[target].add_theme_color_override(\"font_color\", target_text_color)

func _on_hover_exit(coords: Vector2i) -> void:
    if coords == _hover_coordinates:
        _hovering = false
        if _bombing:
            for target: Vector2i in _marked_targets:
                var discovered: bool = _game.is_discovered_present(target)
                var not_present: bool = _game.is_discovered_not_present(target)
                _field_labels[target].add_theme_color_override(\"font_color\", _get_word_text_color(discovered, not_present))


func _sync_board() -> void:
    if _tween != null && _tween.is_running():
        _tween.kill()

    for coords: Vector2i in _field_labels:
        _field_labels[coords].text = _game.get_word(coords)
        var discovered: bool = _game.is_discovered_present(coords)
        var not_present: bool = _game.is_discovered_not_present(coords)

        var status: HackingGame.WordStatus = _game.get_word_status(coords)
        _field_backgrounds[coords].texture = _status_to_texture(status)

        match status:
            HackingGame.WordStatus.DEFAULT:
                _field_labels[coords].add_theme_color_override(\"font_color\", _get_word_text_color(discovered, not_present))
            HackingGame.WordStatus.DESTROYED:
                _field_labels[coords].add_theme_color_override(\"font_color\", destroyed_text_color)
            HackingGame.WordStatus.WRONG_POSITION:
                _field_labels[coords].add_theme_color_override(\"font_color\",  _get_word_text_color(discovered, not_present))
            HackingGame.WordStatus.CORRECT:
                _field_labels[coords].add_theme_color_override(\"font_color\",  _get_word_text_color(discovered, not_present))

func _status_to_texture(status: HackingGame.WordStatus) -> Texture:
    match status:
        HackingGame.WordStatus.DEFAULT:
            return word_bg_tex_default
        HackingGame.WordStatus.DESTROYED:
            return word_bg_tex_destroyed
        HackingGame.WordStatus.WRONG_POSITION:
            return word_bg_tex_wrong_place
        HackingGame.WordStatus.CORRECT:
            return word_bg_tex_correct
        _:
            print_debug(\"Status %s not known as texture, using default\" % status)
            return word_bg_tex_default

func _get_word_text_color(discovered: bool, not_present: bool) -> Color:
    if discovered:
        return discoverd_text_color
    if not_present:
        return discoverd_not_text_color
    return default_text_color

func _on_hack_button_pressed() -> void:
    _game.hack()
    _sync_board()

func _on_deploy_bomb_pressed() -> void:
    if _bombing:
        _cancel_bombing()
    else:
        _ready_bombing()
var _bombing: bool

func _cancel_bombing() -> void:
    _bombing = false
    _deploy_bomb_button.text = DEPLOY_BOMB_TEXT
    toggle_word_controls(false)
    toggle_shift_buttons(false)
    sync_inventory_actions()
    _handle_attempts_updated(_game.attempts_remaining)

func _ready_bombing() -> void:
    _bombing = true
    _deploy_bomb_button.text = CANCEL_BOMB_TEXT
    toggle_shift_buttons(true)
    toggle_word_controls(true)
    _worming.disabled = true
    _attempt_button.disabled = true
"

[node name="Hacking Game" type="Node" node_paths=PackedStringArray("ui")]
script = ExtResource("1_5dcew")
ui = NodePath("Hacking Game UI")

[node name="Hacking Game UI" type="CanvasLayer" parent="." node_paths=PackedStringArray("_game", "_hacking_area", "_controls_area", "_attempts_label", "_attempt_button", "_bombs_label", "_bombs_counter", "_worms_label", "_worms_counter", "_worming", "_deploy_bomb_button", "_playing_field_outer_container", "_playing_field_container", "_playing_field_container_lower", "attempt_history", "most_recent_attempt")]
layer = 100
script = SubResource("GDScript_gdvd8")
_game = NodePath("..")
_hacking_area = NodePath("HBoxContainer/Game Area")
_controls_area = NodePath("HBoxContainer/Controls")
_attempts_label = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools/Attempts Count")
_attempt_button = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Hack Button")
_bombs_label = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools/Bombs Label")
_bombs_counter = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools/Bombs Count")
_worms_label = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools/Worms Label")
_worms_counter = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools/Worms Counter")
_worming = NodePath("HackingGameWorm")
_deploy_bomb_button = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Deploy Bomb")
background_tex = ExtResource("3_gdvd8")
outer_spacer_color = Color(0.0936694, 0.0936694, 0.0936694, 1)
inner_spacer_color = Color(0.241156, 0.241156, 0.241156, 1)
tex_up = ExtResource("3_8rbb1")
tex_down = ExtResource("4_8tddg")
tex_left = ExtResource("5_5lwk8")
tex_right = ExtResource("6_is8ts")
_playing_field_outer_container = NodePath("HBoxContainer/Game Area/Playing Field Aspect Ratio")
_playing_field_container = NodePath("HBoxContainer/Game Area/Playing Field Aspect Ratio/Playing Field")
_playing_field_container_lower = NodePath("HBoxContainer/Game Area/Playing Field Aspect Ratio/Playing Field Lower")
destroyed_text_color = Color(0.279967, 0.279967, 0.279967, 1)
default_text_color = Color(0.87186, 0.87186, 0.87186, 1)
discoverd_text_color = Color(0.438147, 0.580264, 0.996333, 1)
discoverd_not_text_color = Color(0.306923, 0.306923, 0.306923, 1)
word_bg_tex_default = ExtResource("7_5lwk8")
word_bg_tex_destroyed = ExtResource("8_is8ts")
word_bg_tex_correct = ExtResource("9_f2w7f")
word_bg_tex_wrong_place = ExtResource("10_5yi84")
attempt_history = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Atempt History")
most_recent_attempt = NodePath("HBoxContainer/Controls/MarginContainer/VBoxContainer/Most Recent Attempt")
intro_tutorial = Array[String](["This shows the length of the passphrase neededand the the best solution in the most recent attempt", "This shows how many attempts remain", "This shows how many utilities you have leftand buttons to deploy them", "This is the playing fields where you need to shiftthe pass code parts around to form the corret solution", "Click the buttons around the bord to shift rows and columns", "Press \"Hack!\" to perform one attempt"])

[node name="Background" type="ColorRect" parent="Hacking Game UI"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
color = Color(0.11, 0.11, 0.11, 0.945098)

[node name="HBoxContainer" type="HBoxContainer" parent="Hacking Game UI"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Game Area" type="MarginContainer" parent="Hacking Game UI/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 3.0
theme_override_constants/margin_left = 20
theme_override_constants/margin_top = 20
theme_override_constants/margin_right = 20
theme_override_constants/margin_bottom = 20

[node name="Playing Field Aspect Ratio" type="AspectRatioContainer" parent="Hacking Game UI/HBoxContainer/Game Area"]
clip_contents = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 3.0

[node name="Playing Field Lower" type="GridContainer" parent="Hacking Game UI/HBoxContainer/Game Area/Playing Field Aspect Ratio"]
clip_contents = true
layout_mode = 2
columns = 13

[node name="Playing Field" type="GridContainer" parent="Hacking Game UI/HBoxContainer/Game Area/Playing Field Aspect Ratio"]
clip_contents = true
layout_mode = 2
mouse_filter = 2
columns = 13

[node name="Worm Count Down" type="Label" parent="Hacking Game UI/HBoxContainer/Game Area/Playing Field Aspect Ratio"]
layout_mode = 2
size_flags_vertical = 1
theme_override_colors/font_color = Color(0.77, 0.77, 0.77, 0.905882)
theme_override_colors/font_outline_color = Color(0, 0, 0, 0.494118)
theme_override_constants/outline_size = 10
theme_override_font_sizes/font_size = 144
text = "3"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Controls" type="MarginContainer" parent="Hacking Game UI/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
theme_override_constants/margin_left = 8
theme_override_constants/margin_top = 8
theme_override_constants/margin_right = 8
theme_override_constants/margin_bottom = 8

[node name="Control BG" type="ColorRect" parent="Hacking Game UI/HBoxContainer/Controls"]
layout_mode = 2
color = Color(0.197937, 0.197937, 0.197937, 1)

[node name="MarginContainer" type="MarginContainer" parent="Hacking Game UI/HBoxContainer/Controls"]
layout_mode = 2
theme_override_constants/margin_left = 4
theme_override_constants/margin_top = 4
theme_override_constants/margin_right = 4
theme_override_constants/margin_bottom = 4

[node name="VBoxContainer" type="VBoxContainer" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer"]
layout_mode = 2
size_flags_horizontal = 3

[node name="Attempts and Tools" type="GridContainer" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
layout_mode = 2
columns = 2

[node name="Attempts Label" type="Label" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools"]
layout_mode = 2
size_flags_horizontal = 3
text = "Attempts Remaining"

[node name="Attempts Count" type="Label" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools"]
layout_mode = 2
text = "0"
horizontal_alignment = 2

[node name="Bombs Label" type="Label" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools"]
layout_mode = 2
size_flags_horizontal = 3
text = "Bombs"

[node name="Bombs Count" type="Label" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools"]
layout_mode = 2
text = "0"
horizontal_alignment = 2

[node name="Worms Label" type="Label" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools"]
layout_mode = 2
size_flags_horizontal = 3
text = "Worms"

[node name="Worms Counter" type="Label" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Attempts and Tools"]
layout_mode = 2
text = "0"
horizontal_alignment = 2

[node name="Deploy Bomb" type="Button" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Deploy Bomb"

[node name="Deploy Worm" type="Button" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Deploy Worm"

[node name="Spacer3" type="Control" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 4)
layout_mode = 2

[node name="Worm Navigaion Controls" type="GridContainer" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
clip_contents = true
layout_mode = 2
columns = 3

[node name="Spacer" type="ColorRect" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
color = Color(1, 1, 1, 0)

[node name="Worm Up" type="Button" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
icon = ExtResource("3_8rbb1")
icon_alignment = 1

[node name="Spacer2" type="ColorRect" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
color = Color(1, 1, 1, 0)

[node name="Worm Left" type="Button" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
icon = ExtResource("5_5lwk8")
icon_alignment = 1

[node name="Worm Down" type="Button" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
icon = ExtResource("4_8tddg")
icon_alignment = 1

[node name="Worm Right" type="Button" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
icon = ExtResource("6_is8ts")
icon_alignment = 1

[node name="Spacer" type="Control" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="Atempt History" type="VBoxContainer" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="Label" type="Label" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Passcode"

[node name="Most Recent Attempt" type="HBoxContainer" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="Spacer2" type="Control" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 4)
layout_mode = 2

[node name="Hack Button" type="Button" parent="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Hack!"

[node name="HackingGameWorm" type="Node" parent="Hacking Game UI" node_paths=PackedStringArray("game_ui", "_game", "_worming_navigation_container", "_deploy_worm_button", "_worming_countdown")]
script = ExtResource("12_f2w7f")
game_ui = NodePath("..")
_game = NodePath("../..")
_worming_navigation_container = NodePath("../HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls")
worm_head_tex = ExtResource("11_5yi84")
worm_head_dead_tex = ExtResource("12_l3q62")
worm_straight_tex = ExtResource("12_7o2ew")
worm_angled_tex = ExtResource("13_l3q62")
worm_tail_tex = ExtResource("14_7o2ew")
_deploy_worm_button = NodePath("../HBoxContainer/Controls/MarginContainer/VBoxContainer/Deploy Worm")
_worming_countdown = NodePath("../HBoxContainer/Game Area/Playing Field Aspect Ratio/Worm Count Down")
metadata/_custom_type_script = "uid://kf4ebrv2dpa3"

[connection signal="pressed" from="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Deploy Bomb" to="Hacking Game UI" method="_on_deploy_bomb_pressed"]
[connection signal="pressed" from="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Deploy Worm" to="Hacking Game UI/HackingGameWorm" method="_on_deploy_worm_pressed"]
[connection signal="pressed" from="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls/Worm Up" to="Hacking Game UI/HackingGameWorm" method="_on_worm_up_pressed"]
[connection signal="pressed" from="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls/Worm Left" to="Hacking Game UI/HackingGameWorm" method="_on_worm_left_pressed"]
[connection signal="pressed" from="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls/Worm Down" to="Hacking Game UI/HackingGameWorm" method="_on_worm_down_pressed"]
[connection signal="pressed" from="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Worm Navigaion Controls/Worm Right" to="Hacking Game UI/HackingGameWorm" method="_on_worm_right_pressed"]
[connection signal="pressed" from="Hacking Game UI/HBoxContainer/Controls/MarginContainer/VBoxContainer/Hack Button" to="Hacking Game UI" method="_on_hack_button_pressed"]
